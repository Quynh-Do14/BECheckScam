package com.example.checkscamv2.service.Impl;

import com.example.checkscamv2.constant.ServiceRegistrationConstants;
import com.example.checkscamv2.dto.request.PartnershipRequest;
import com.example.checkscamv2.enums.PackageType;
import com.example.checkscamv2.service.EmailService;
import com.example.checkscamv2.service.PartnershipEmailService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

@Service
@RequiredArgsConstructor
@Slf4j
public class PartnershipEmailServiceImpl implements PartnershipEmailService {
    
    private final EmailService emailService;
    
    @Override
    public boolean sendPartnershipNotificationToAdmin(PartnershipRequest request) {
        try {
            String subject = "[AI6] Y√™u c·∫ßu h·ª£p t√°c m·ªõi t·ª´ " + request.getOrganization();
            String content = buildAdminNotificationContent(request);
            
            // G·ª≠i email cho t·∫•t c·∫£ admin
            boolean success = true;
            for (String adminEmail : ServiceRegistrationConstants.ADMIN_EMAILS) {
                try {
                    emailService.sendEmail(adminEmail, subject, content);
                    log.info("Sent partnership notification to admin {} for organization: {}", adminEmail, request.getOrganization());
                } catch (Exception e) {
                    log.error("Failed to send partnership notification to admin {}: {}", adminEmail, e.getMessage());
                    success = false;
                }
            }
            return success;
        } catch (Exception e) {
            log.error("Failed to send partnership notification to admins: {}", e.getMessage());
            return false;
        }
    }
    
    @Override
    public boolean sendPartnershipConfirmationToClient(PartnershipRequest request) {
        try {
            String subject = "X√°c nh·∫≠n ƒëƒÉng k√Ω h·ª£p t√°c v·ªõi AI6 - " + request.getOrganization();
            String content = buildClientConfirmationContent(request);
            
            emailService.sendEmail(request.getEmail(), subject, content);
            log.info("Sent partnership confirmation to client: {}", request.getEmail());
            return true;
        } catch (Exception e) {
            log.error("Failed to send partnership confirmation to client: {}", e.getMessage());
            return false;
        }
    }
    
    @Override
    @Async
    public void sendPartnershipEmails(PartnershipRequest request) {
        log.info("Sending partnership emails asynchronously for: {}", request.getOrganization());
        
        // G·ª≠i email cho admin
        try {
            sendPartnershipNotificationToAdmin(request);
        } catch (Exception e) {
            log.error("Error sending admin notification: {}", e.getMessage());
        }
        
        // G·ª≠i email x√°c nh·∫≠n cho client
        try {
            sendPartnershipConfirmationToClient(request);
        } catch (Exception e) {
            log.error("Error sending client confirmation: {}", e.getMessage());
        }
        
        log.info("Partnership emails sent successfully for: {}", request.getOrganization());
    }
    
    private String buildAdminNotificationContent(PartnershipRequest request) {
        PackageType packageType;
        try {
            packageType = PackageType.fromCode(request.getPackageType());
        } catch (Exception e) {
            packageType = PackageType.BASIC; // fallback
        }
        
        return String.format(
                "K√≠nh g·ª≠i Admin,\n\n" +
                "C√≥ y√™u c·∫ßu h·ª£p t√°c m·ªõi t·ª´ kh√°ch h√†ng:\n\n" +
                "üìã TH√îNG TIN KH√ÅCH H√ÄNG:\n" +
                "‚Ä¢ H·ªç t√™n: %s\n" +
                "‚Ä¢ Email: %s\n" +
                "‚Ä¢ T·ªï ch·ª©c: %s\n" +
                "‚Ä¢ S·ªë ƒëi·ªán tho·∫°i: %s\n" +
                "‚Ä¢ G√≥i h·ª£p t√°c: %s (%s)\n" +
                "‚Ä¢ Th·ªùi gian ƒëƒÉng k√Ω: %s\n\n" +
                "üí¨ L·ªúI NH·∫ÆN:\n" +
                "%s\n\n" +
                "---\n" +
                "Vui l√≤ng li√™n h·ªá tr·ª±c ti·∫øp v·ªõi kh√°ch h√†ng ƒë·ªÉ th·∫£o lu·∫≠n chi ti·∫øt v·ªÅ h·ª£p t√°c.\n" +
                "üìû Hotline: %s\n" +
                "üìß Email: %s\n\n" +
                "Tr√¢n tr·ªçng,\n" +
                "H·ªá th·ªëng AI6 Partnership",
                request.getName(),
                request.getEmail(),
                request.getOrganization(),
                request.getPhoneNumber() != null ? request.getPhoneNumber() : "Ch∆∞a cung c·∫•p",
                packageType.getDisplayName(),
                packageType.getMinAmount().toString() + " VND",
                LocalDateTime.now().format(DateTimeFormatter.ofPattern(ServiceRegistrationConstants.DISPLAY_DATE_FORMAT)),
                request.getMessage() != null ? request.getMessage() : "Kh√¥ng c√≥ l·ªùi nh·∫Øn",
                ServiceRegistrationConstants.COMPANY_HOTLINE,
                ServiceRegistrationConstants.COMPANY_EMAIL
        );
    }
    
    private String buildClientConfirmationContent(PartnershipRequest request) {
        PackageType packageType;
        try {
            packageType = PackageType.fromCode(request.getPackageType());
        } catch (Exception e) {
            packageType = PackageType.BASIC; // fallback
        }
        
        return String.format(
                "K√≠nh g·ª≠i %s,\n\n" +
                "C·∫£m ∆°n b·∫°n ƒë√£ quan t√¢m v√† ƒëƒÉng k√Ω h·ª£p t√°c v·ªõi AI6!\n\n" +
                "üìã TH√îNG TIN ƒêƒÇNG K√ù:\n" +
                "‚Ä¢ T·ªï ch·ª©c: %s\n" +
                "‚Ä¢ G√≥i h·ª£p t√°c: %s\n" +
                "‚Ä¢ Email li√™n h·ªá: %s\n" +
                "‚Ä¢ Th·ªùi gian ƒëƒÉng k√Ω: %s\n\n" +
                "‚úÖ TR·∫†NG TH√ÅI: ƒê√£ ti·∫øp nh·∫≠n y√™u c·∫ßu\n\n" +
                "üöÄ B∆Ø·ªöC TI·∫æP THEO:\n" +
                "ƒê·ªôi ng≈© AI6 s·∫Ω xem x√©t ƒë·ªÅ xu·∫•t c·ªßa b·∫°n v√† li√™n h·ªá tr·ª±c ti·∫øp trong v√≤ng 24-48 gi·ªù l√†m vi·ªác " +
                "ƒë·ªÉ th·∫£o lu·∫≠n chi ti·∫øt v·ªÅ:\n" +
                "‚Ä¢ ƒêi·ªÅu kho·∫£n h·ª£p t√°c\n" +
                "‚Ä¢ Quy·ªÅn l·ª£i c·ª• th·ªÉ\n" +
                "‚Ä¢ K·∫ø ho·∫°ch tri·ªÉn khai\n" +
                "‚Ä¢ Th·ªèa thu·∫≠n ph√°p l√Ω\n\n" +
                "üìû LI√äN H·ªÜ KH·∫®N C·∫§P:\n" +
                "‚Ä¢ Email: %s\n" +
                "‚Ä¢ Hotline: %s\n" +
                "‚Ä¢ Website: %s\n\n" +
                "Ch√∫ng t√¥i r·∫•t mong ƒë∆∞·ª£c h·ª£p t√°c c√πng %s trong vi·ªác x√¢y d·ª±ng m·ªôt Vi·ªát Nam an to√†n h∆°n tr∆∞·ªõc " +
                "c√°c m·ªëi ƒëe d·ªça l·ª´a ƒë·∫£o tr·ª±c tuy·∫øn! ü§ñ‚öîÔ∏è\n\n" +
                "Tr√¢n tr·ªçng,\n" +
                "%s\n" +
                "AI6 Partnership Team",
                
                request.getName(),
                request.getOrganization(),
                packageType.getDisplayName(),
                request.getEmail(),
                LocalDateTime.now().format(DateTimeFormatter.ofPattern(ServiceRegistrationConstants.DISPLAY_DATE_FORMAT)),
                ServiceRegistrationConstants.COMPANY_EMAIL,
                ServiceRegistrationConstants.COMPANY_HOTLINE,
                ServiceRegistrationConstants.COMPANY_WEBSITE,
                request.getOrganization(),
                ServiceRegistrationConstants.COMPANY_NAME
        );
    }
}