apiVersion: apps/v1
kind: Deployment
metadata:
  name: ai6-frontend-deployment
  namespace: default
  labels:
    app: ai6-frontend
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: ai6-frontend
  template:
    metadata:
      labels:
        app: ai6-frontend
    spec:
      containers:
        - name: ai6-frontend
          image: ai6-fe
          imagePullPolicy: Always
          ports:
            - containerPort: 80
              name: http
          env:
            - name: NODE_ENV
              value: "production"
            - name: API_BASE_URL
              value: "http://ai6-service:8080"
            - name: NGINX_HOST
              value: "0.0.0.0"
            - name: NGINX_PORT
              value: "80"
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "1Gi"
              cpu: "500m"
          readinessProbe:
            httpGet:
              path: /health
              port: 80
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /health
              port: 80
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 3
          volumeMounts:
            - name: nginx-config
              mountPath: /etc/nginx/conf.d
              readOnly: true
      volumes:
        - name: nginx-config
          configMap:
            name: ai6-nginx-config
      restartPolicy: Always
      terminationGracePeriodSeconds: 30

---
# Service cho Frontend
apiVersion: v1
kind: Service
metadata:
  name: ai6-frontend-service
  namespace: default
  labels:
    app: ai6-frontend
spec:
  selector:
    app: ai6-frontend
  ports:
    - name: http
      port: 80
      targetPort: 80
      protocol: TCP
  type: ClusterIP

---
# LoadBalancer cho Frontend external access
apiVersion: v1
kind: Service
metadata:
  name: ai6-frontend-loadbalancer
  namespace: default
  labels:
    app: ai6-frontend
spec:
  type: LoadBalancer
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
      name: http
  selector:
    app: ai6-frontend

---
# Nginx ConfigMap cho AI6 Frontend
apiVersion: v1
kind: ConfigMap
metadata:
  name: ai6-nginx-config
  namespace: default
data:
  default.conf: |
    server {
        listen 80;
        server_name localhost;
        root /usr/share/nginx/html;
        index index.html;
    
        # Gzip compression
        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_proxied expired no-cache no-store private auth;
        gzip_types
            text/plain
            text/css
            text/xml
            text/javascript
            application/javascript
            application/xml+rss
            application/json;
    
        # Security headers - CSP được cải thiện
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data: https:; connect-src 'self' https: http://ai6-service:8080; frame-src 'none';" always;
    
        # Cache static assets
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            access_log off;
        }
    
        # API proxy to backend
        location /api {
            proxy_pass http://ai6-service:8080; 
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            proxy_buffering off;
        }
    
        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    
        # Angular routing - serve index.html for all routes
        location / {
            try_files $uri $uri/ /index.html;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
        }
    
        # Error pages
        error_page 404 /index.html;
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }